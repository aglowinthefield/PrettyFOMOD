//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1107.0 using the following command:
// XmlSchemaClassGenerator.Console -n PrettyFOMOD -o out http://qconsulting.ca/fo3/ModConfig5.0.xsd
namespace Glow.PrettyFOMOD
{
    
    
    /// <summary>
    /// <para>The possible plugin types.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The possible plugin types.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("pluginTypeEnum", Namespace="")]
    public enum PluginTypeEnum
    {
        
        /// <summary>
        /// <para>Indicates the plugin must be installed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Indicates the plugin must be installed.")]
        Required,
        
        /// <summary>
        /// <para>Indicates the plugin is optional.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Indicates the plugin is optional.")]
        Optional,
        
        /// <summary>
        /// <para>Indicates the plugin is recommended for stability.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Indicates the plugin is recommended for stability.")]
        Recommended,
        
        /// <summary>
        /// <para>Indicates that using the plugin could result in instability (i.e., a prerequisite plugin is missing).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Indicates that using the plugin could result in instability (i.e., a prerequisite" +
            " plugin is missing).")]
        NotUsable,
        
        /// <summary>
        /// <para>Indicates that using the plugin could result in instability if loaded
        ///						with the currently active plugins (i.e., a prerequisite plugin is missing),
        ///						but that the prerequisite plugin is installed, just not activated.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Indicates that using the plugin could result in instability if loaded with the cu" +
            "rrently active plugins (i.e., a prerequisite plugin is missing), but that the pr" +
            "erequisite plugin is installed, just not activated.")]
        CouldBeUsable,
    }
    
    /// <summary>
    /// <para>The type of a given plugin.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The type of a given plugin.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("pluginType", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PluginType
    {
        
        /// <summary>
        /// <para>The name of the plugin type.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The name of the plugin type.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("name")]
        public PluginTypeEnum Name { get; set; }
    }
    
    /// <summary>
    /// <para>A mod upon which the type of a plugin depends.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A mod upon which the type of a plugin depends.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("fileDependency", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileDependency
    {
        
        /// <summary>
        /// <para>The file of the mod upon which a the plugin depends.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The file of the mod upon which a the plugin depends.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("file")]
        public string File { get; set; }
        
        /// <summary>
        /// <para>The state of the mod file.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The state of the mod file.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("state")]
        public FileDependencyState State { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("FileDependencyState", Namespace="", AnonymousType=true)]
    public enum FileDependencyState
    {
        
        /// <summary>
        /// <para>Indicates the mod file is not installed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Indicates the mod file is not installed.")]
        Missing,
        
        /// <summary>
        /// <para>Indicates the mod file is installed, but not active.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Indicates the mod file is installed, but not active.")]
        Inactive,
        
        /// <summary>
        /// <para>Indicates the mod file is installed and active.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Indicates the mod file is installed and active.")]
        Active,
    }
    
    /// <summary>
    /// <para>A condition flag upon which the type of a plugin depends.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A condition flag upon which the type of a plugin depends.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("flagDependency", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FlagDependency
    {
        
        /// <summary>
        /// <para>The name of the condition flag upon which a the plugin depends.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The name of the condition flag upon which a the plugin depends.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("flag")]
        public string Flag { get; set; }
        
        /// <summary>
        /// <para>The value of the condition flag upon which a the plugin depends.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The value of the condition flag upon which a the plugin depends.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("value")]
        public string Value { get; set; }
    }
    
    /// <summary>
    /// <para>A dependency that is made up of one or more dependencies.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A dependency that is made up of one or more dependencies.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("compositeDependency", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompositeDependency : IDependencyTypesGroup
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FileDependency> _fileDependency;
        
        /// <summary>
        /// <para>Specifies that a mod must be in a specified state.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Specifies that a mod must be in a specified state.")]
        [System.Xml.Serialization.XmlElementAttribute("fileDependency", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<FileDependency> FileDependency
        {
            get
            {
                return _fileDependency;
            }
            private set
            {
                _fileDependency = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FileDependency collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FileDependencySpecified
        {
            get
            {
                return (this.FileDependency.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CompositeDependency" /> class.</para>
        /// </summary>
        public CompositeDependency()
        {
            this._fileDependency = new System.Collections.ObjectModel.Collection<FileDependency>();
            this._flagDependency = new System.Collections.ObjectModel.Collection<FlagDependency>();
            this._gameDependency = new System.Collections.ObjectModel.Collection<VersionDependency>();
            this._fommDependency = new System.Collections.ObjectModel.Collection<VersionDependency>();
            this._dependencies = new System.Collections.ObjectModel.Collection<CompositeDependency>();
            this._foseDependency = new System.Collections.ObjectModel.Collection<VersionDependency>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FlagDependency> _flagDependency;
        
        /// <summary>
        /// <para>Specifies that a condition flag must have a specific value.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Specifies that a condition flag must have a specific value.")]
        [System.Xml.Serialization.XmlElementAttribute("flagDependency", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<FlagDependency> FlagDependency
        {
            get
            {
                return _flagDependency;
            }
            private set
            {
                _flagDependency = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FlagDependency collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FlagDependencySpecified
        {
            get
            {
                return (this.FlagDependency.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<VersionDependency> _gameDependency;
        
        /// <summary>
        /// <para>Specifies a minimum required version of the installed game.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Specifies a minimum required version of the installed game.")]
        [System.Xml.Serialization.XmlElementAttribute("gameDependency", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<VersionDependency> GameDependency
        {
            get
            {
                return _gameDependency;
            }
            private set
            {
                _gameDependency = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the GameDependency collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GameDependencySpecified
        {
            get
            {
                return (this.GameDependency.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<VersionDependency> _fommDependency;
        
        /// <summary>
        /// <para>Specifies a minimum required version of FOMM.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Specifies a minimum required version of FOMM.")]
        [System.Xml.Serialization.XmlElementAttribute("fommDependency", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<VersionDependency> FommDependency
        {
            get
            {
                return _fommDependency;
            }
            private set
            {
                _fommDependency = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FommDependency collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FommDependencySpecified
        {
            get
            {
                return (this.FommDependency.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<CompositeDependency> _dependencies;
        
        /// <summary>
        /// <para>A list of mods and their states against which to match the user's installation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A list of mods and their states against which to match the user\'s installation.")]
        [System.Xml.Serialization.XmlElementAttribute("dependencies", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<CompositeDependency> Dependencies
        {
            get
            {
                return _dependencies;
            }
            private set
            {
                _dependencies = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Dependencies collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DependenciesSpecified
        {
            get
            {
                return (this.Dependencies.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<VersionDependency> _foseDependency;
        
        /// <summary>
        /// <para>Specifies a minimum required version of FOSE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Specifies a minimum required version of FOSE.")]
        [System.Xml.Serialization.XmlElementAttribute("foseDependency", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<VersionDependency> FoseDependency
        {
            get
            {
                return _foseDependency;
            }
            private set
            {
                _foseDependency = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FoseDependency collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FoseDependencySpecified
        {
            get
            {
                return (this.FoseDependency.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private CompositeDependencyOperator _operator = PrettyFOMOD.CompositeDependencyOperator.And;
        
        /// <summary>
        /// <para>The relation of the contained dependencies.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(PrettyFOMOD.CompositeDependencyOperator.And)]
        [System.ComponentModel.DescriptionAttribute("The relation of the contained dependencies.")]
        [System.Xml.Serialization.XmlAttributeAttribute("operator")]
        public CompositeDependencyOperator Operator
        {
            get
            {
                return _operator;
            }
            set
            {
                _operator = value;
            }
        }
    }
    
    /// <summary>
    /// <para>The group of possible dependencies.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The group of possible dependencies.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    public partial interface IDependencyTypesGroup
    {
        
        /// <summary>
        /// <para>Specifies that a mod must be in a specified state.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Specifies that a mod must be in a specified state.")]
        System.Collections.ObjectModel.Collection<FileDependency> FileDependency
        {
            get;
        }
        
        /// <summary>
        /// <para>Specifies that a condition flag must have a specific value.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Specifies that a condition flag must have a specific value.")]
        System.Collections.ObjectModel.Collection<FlagDependency> FlagDependency
        {
            get;
        }
        
        /// <summary>
        /// <para>Specifies a minimum required version of the installed game.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Specifies a minimum required version of the installed game.")]
        System.Collections.ObjectModel.Collection<VersionDependency> GameDependency
        {
            get;
        }
        
        /// <summary>
        /// <para>Specifies a minimum required version of FOMM.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Specifies a minimum required version of FOMM.")]
        System.Collections.ObjectModel.Collection<VersionDependency> FommDependency
        {
            get;
        }
        
        /// <summary>
        /// <para>A list of mods and their states against which to match the user's installation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A list of mods and their states against which to match the user\'s installation.")]
        System.Collections.ObjectModel.Collection<CompositeDependency> Dependencies
        {
            get;
        }
    }
    
    /// <summary>
    /// <para>A required minimum version of an item.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A required minimum version of an item.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("versionDependency", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VersionDependency
    {
        
        /// <summary>
        /// <para>The required minimum version of the item.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The required minimum version of the item.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("version")]
        public string Version { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("CompositeDependencyOperator", Namespace="", AnonymousType=true)]
    public enum CompositeDependencyOperator
    {
        
        /// <summary>
        /// <para>Indicates all contained dependencies must be satisfied in order for this dependency to be satisfied.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Indicates all contained dependencies must be satisfied in order for this dependen" +
            "cy to be satisfied.")]
        And,
        
        /// <summary>
        /// <para>Indicates at least one listed dependency must be satisfied in order for this dependency to be satisfied.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Indicates at least one listed dependency must be satisfied in order for this depe" +
            "ndency to be satisfied.")]
        Or,
    }
    
    /// <summary>
    /// <para>A pattern of mod files and condition flags that determine the type of a plugin.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A pattern of mod files and condition flags that determine the type of a plugin.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("dependencyPattern", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DependencyPattern
    {
        
        /// <summary>
        /// <para>The list of mods and their states against which to match the user's installation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The list of mods and their states against which to match the user\'s installation." +
            "")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("dependencies", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CompositeDependency Dependencies { get; set; }
        
        /// <summary>
        /// <para>The type of the plugin.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The type of the plugin.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("type", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PluginType Type { get; set; }
    }
    
    /// <summary>
    /// <para>A list of dependency patterns.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A list of dependency patterns.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("dependencyPatternList", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DependencyPatternList
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DependencyPattern> _pattern;
        
        /// <summary>
        /// <para>A specific pattern of mod files and condition flags against which to match the user's installation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A specific pattern of mod files and condition flags against which to match the us" +
            "er\'s installation.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("pattern", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<DependencyPattern> Pattern
        {
            get
            {
                return _pattern;
            }
            private set
            {
                _pattern = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DependencyPatternList" /> class.</para>
        /// </summary>
        public DependencyPatternList()
        {
            this._pattern = new System.Collections.ObjectModel.Collection<DependencyPattern>();
        }
    }
    
    /// <summary>
    /// <para>A plugin type that is dependent upon the state of other mods.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A plugin type that is dependent upon the state of other mods.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("dependencyPluginType", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DependencyPluginType
    {
        
        /// <summary>
        /// <para>The default type of the plugin used if none of the specified dependency states are satisfied.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The default type of the plugin used if none of the specified dependency states ar" +
            "e satisfied.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("defaultType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PluginType DefaultType { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DependencyPattern> _patterns;
        
        /// <summary>
        /// <para>The list of dependency patterns against which to match the user's installation. The first pattern that matches the user's installation determines the type of the plugin.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The list of dependency patterns against which to match the user\'s installation. T" +
            "he first pattern that matches the user\'s installation determines the type of the" +
            " plugin.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlArrayAttribute("patterns", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("pattern", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<DependencyPattern> Patterns
        {
            get
            {
                return _patterns;
            }
            set
            {
                _patterns = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DependencyPluginType" /> class.</para>
        /// </summary>
        public DependencyPluginType()
        {
            this._patterns = new System.Collections.ObjectModel.Collection<DependencyPattern>();
        }
    }
    
    /// <summary>
    /// <para>Describes the type of a plugin.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Describes the type of a plugin.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("pluginTypeDescriptor", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PluginTypeDescriptor
    {
        
        /// <summary>
        /// <para>Used when the plugin type is dependent upon the state of other mods.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Used when the plugin type is dependent upon the state of other mods.")]
        [System.Xml.Serialization.XmlElementAttribute("dependencyType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public DependencyPluginType DependencyType { get; set; }
        
        /// <summary>
        /// <para>The type of the plugin.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The type of the plugin.")]
        [System.Xml.Serialization.XmlElementAttribute("type", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PluginType Type { get; set; }
    }
    
    /// <summary>
    /// <para>An image.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("An image.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("image", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Image
    {
        
        /// <summary>
        /// <para>The path to the image in the FOMod.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The path to the image in the FOMod.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("path")]
        public string Path { get; set; }
    }
    
    /// <summary>
    /// <para>An image.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("An image.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("headerImage", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HeaderImage
    {
        
        /// <summary>
        /// <para>The path to the image in the FOMod. If omitted the FOMod's screenshot is used.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The path to the image in the FOMod. If omitted the FOMod\'s screenshot is used.")]
        [System.Xml.Serialization.XmlAttributeAttribute("path")]
        public string Path { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _showImage = true;
        
        /// <summary>
        /// <para>Whether or not the image should be displayed.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Whether or not the image should be displayed.")]
        [System.Xml.Serialization.XmlAttributeAttribute("showImage")]
        public bool ShowImage
        {
            get
            {
                return _showImage;
            }
            set
            {
                _showImage = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _showFade = true;
        
        /// <summary>
        /// <para>Whether or not the fade effect should be displayed. This value is ignored if showImage is false.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Whether or not the fade effect should be displayed. This value is ignored if show" +
            "Image is false.")]
        [System.Xml.Serialization.XmlAttributeAttribute("showFade")]
        public bool ShowFade
        {
            get
            {
                return _showFade;
            }
            set
            {
                _showFade = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private int _height = -1;
        
        /// <summary>
        /// <para>The height to use for the image. Note that there is a minimum height that is enforced based on the user's settings.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(-1)]
        [System.ComponentModel.DescriptionAttribute("The height to use for the image. Note that there is a minimum height that is enfo" +
            "rced based on the user\'s settings.")]
        [System.Xml.Serialization.XmlAttributeAttribute("height")]
        public int Height
        {
            get
            {
                return _height;
            }
            set
            {
                _height = value;
            }
        }
    }
    
    /// <summary>
    /// <para>A plugin.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A plugin.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("plugin", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Plugin
    {
        
        /// <summary>
        /// <para>A description of the plugin.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A description of the plugin.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("description", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Description { get; set; }
        
        /// <summary>
        /// <para>The optional image associated with a plugin.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The optional image associated with a plugin.")]
        [System.Xml.Serialization.XmlElementAttribute("image", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Image Image { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FileList> _files;
        
        /// <summary>
        /// <para>The list of files and folders that need to be installed for the plugin.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The list of files and folders that need to be installed for the plugin.")]
        [System.Xml.Serialization.XmlElementAttribute("files", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<FileList> Files
        {
            get
            {
                return _files;
            }
            private set
            {
                _files = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Files collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FilesSpecified
        {
            get
            {
                return (this.Files.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Plugin" /> class.</para>
        /// </summary>
        public Plugin()
        {
            this._files = new System.Collections.ObjectModel.Collection<FileList>();
            this._conditionFlags = new System.Collections.ObjectModel.Collection<ConditionFlagList>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ConditionFlagList> _conditionFlags;
        
        /// <summary>
        /// <para>The list of condition flags to set if the plugin is in the appropriate state.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The list of condition flags to set if the plugin is in the appropriate state.")]
        [System.Xml.Serialization.XmlElementAttribute("conditionFlags", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<ConditionFlagList> ConditionFlags
        {
            get
            {
                return _conditionFlags;
            }
            private set
            {
                _conditionFlags = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ConditionFlags collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConditionFlagsSpecified
        {
            get
            {
                return (this.ConditionFlags.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Describes the type of the plugin.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Describes the type of the plugin.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("typeDescriptor", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PluginTypeDescriptor TypeDescriptor { get; set; }
        
        /// <summary>
        /// <para>The name of the plugin.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The name of the plugin.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("name")]
        public string Name { get; set; }
    }
    
    /// <summary>
    /// <para>A list of files and folders.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A list of files and folders.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("fileList", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileList
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FileSystemItem> _file;
        
        /// <summary>
        /// <para>A file belonging to the plugin or module.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A file belonging to the plugin or module.")]
        [System.Xml.Serialization.XmlElementAttribute("file", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<FileSystemItem> File
        {
            get
            {
                return _file;
            }
            private set
            {
                _file = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FomodFileIO collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FileSpecified
        {
            get
            {
                return (this.File.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="FileList" /> class.</para>
        /// </summary>
        public FileList()
        {
            this._file = new System.Collections.ObjectModel.Collection<FileSystemItem>();
            this._folder = new System.Collections.ObjectModel.Collection<FileSystemItem>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FileSystemItem> _folder;
        
        /// <summary>
        /// <para>A folder belonging to the plugin or module.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A folder belonging to the plugin or module.")]
        [System.Xml.Serialization.XmlElementAttribute("folder", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<FileSystemItem> Folder
        {
            get
            {
                return _folder;
            }
            private set
            {
                _folder = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Folder collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FolderSpecified
        {
            get
            {
                return (this.Folder.Count != 0);
            }
        }
    }
    
    /// <summary>
    /// <para>A file or folder that may be installed as part of a module or plugin.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A file or folder that may be installed as part of a module or plugin.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("fileSystemItem", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileSystemItem
    {
        
        /// <summary>
        /// <para>The path to the file or folder in the FOMod.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The path to the file or folder in the FOMod.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("source")]
        public string Source { get; set; }
        
        /// <summary>
        /// <para>The path to which the file or folder should be installed. If omitted, the destination is the same as the source.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The path to which the file or folder should be installed. If omitted, the destina" +
            "tion is the same as the source.")]
        [System.Xml.Serialization.XmlAttributeAttribute("destination")]
        public string Destination { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _alwaysInstall = false;
        
        /// <summary>
        /// <para>Indicates that the file or folder should always be installed, regardless of whether or not the plugin has been selected.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Indicates that the file or folder should always be installed, regardless of wheth" +
            "er or not the plugin has been selected.")]
        [System.Xml.Serialization.XmlAttributeAttribute("alwaysInstall")]
        public bool AlwaysInstall
        {
            get
            {
                return _alwaysInstall;
            }
            set
            {
                _alwaysInstall = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private bool _installIfUsable = false;
        
        /// <summary>
        /// <para>Indicates that the file or folder should always be installed if the plugin is not NotUsable, regardless of whether or not the plugin has been selected.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Indicates that the file or folder should always be installed if the plugin is not" +
            " NotUsable, regardless of whether or not the plugin has been selected.")]
        [System.Xml.Serialization.XmlAttributeAttribute("installIfUsable")]
        public bool InstallIfUsable
        {
            get
            {
                return _installIfUsable;
            }
            set
            {
                _installIfUsable = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _priority = "0";
        
        /// <summary>
        /// <para>A number describing the relative priority of the file or folder. A higher number indicates the file or folder should be installed after the items with lower numbers. This value does not have to be unique.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("0")]
        [System.ComponentModel.DescriptionAttribute("A number describing the relative priority of the file or folder. A higher number " +
            "indicates the file or folder should be installed after the items with lower numb" +
            "ers. This value does not have to be unique.")]
        [System.Xml.Serialization.XmlAttributeAttribute("priority")]
        public string Priority
        {
            get
            {
                return _priority;
            }
            set
            {
                _priority = value;
            }
        }
    }
    
    /// <summary>
    /// <para>A list of condition flags to set if a plugin is in the appropriate state.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A list of condition flags to set if a plugin is in the appropriate state.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("conditionFlagList", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConditionFlagList
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<SetConditionFlag> _flag;
        
        /// <summary>
        /// <para>A condition flag to set if the plugin is selected.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A condition flag to set if the plugin is selected.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("flag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<SetConditionFlag> Flag
        {
            get
            {
                return _flag;
            }
            private set
            {
                _flag = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ConditionFlagList" /> class.</para>
        /// </summary>
        public ConditionFlagList()
        {
            this._flag = new System.Collections.ObjectModel.Collection<SetConditionFlag>();
        }
    }
    
    /// <summary>
    /// <para>A condition flag to set if a plugin is selected.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A condition flag to set if a plugin is selected.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("setConditionFlag", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetConditionFlag
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>The identifying name of the condition flag.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The identifying name of the condition flag.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("name")]
        public string Name { get; set; }
    }
    
    /// <summary>
    /// <para>The possible orders of items.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The possible orders of items.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("orderEnum", Namespace="")]
    public enum OrderEnum
    {
        
        /// <summary>
        /// <para>Indicates the items are to be ordered ascending alphabetically.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Indicates the items are to be ordered ascending alphabetically.")]
        Ascending,
        
        /// <summary>
        /// <para>Indicates the items are to be ordered descending alphabetically.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Indicates the items are to be ordered descending alphabetically.")]
        Descending,
        
        /// <summary>
        /// <para>Indicates the items are to be ordered as listed in the configuration file.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Indicates the items are to be ordered as listed in the configuration file.")]
        Explicit,
    }
    
    /// <summary>
    /// <para>A list of plugins.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A list of plugins.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("pluginList", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PluginList
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Plugin> _plugin;
        
        /// <summary>
        /// <para>A mod plugin belonging to a group.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A mod plugin belonging to a group.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("plugin", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<Plugin> Plugin
        {
            get
            {
                return _plugin;
            }
            set
            {
                _plugin = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PluginList" /> class.</para>
        /// </summary>
        public PluginList()
        {
            this._plugin = new System.Collections.ObjectModel.Collection<Plugin>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private OrderEnum _order = PrettyFOMOD.OrderEnum.Ascending;
        
        /// <summary>
        /// <para>The order by which to list the plugins.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(PrettyFOMOD.OrderEnum.Ascending)]
        [System.ComponentModel.DescriptionAttribute("The order by which to list the plugins.")]
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public OrderEnum Order
        {
            get
            {
                return _order;
            }
            set
            {
                _order = value;
            }
        }
    }
    
    /// <summary>
    /// <para>A group of plugins.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A group of plugins.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("group", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Group
    {
        
        /// <summary>
        /// <para>The list of plugins in the group.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The list of plugins in the group.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("plugins", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PluginList Plugins { get; set; }
        
        /// <summary>
        /// <para>The name of the group.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The name of the group.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("name")]
        public string Name { get; set; }
        
        /// <summary>
        /// <para>The type of the group.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The type of the group.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("type")]
        public GroupType Type { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("GroupType", Namespace="", AnonymousType=true)]
    public enum GroupType
    {
        
        /// <summary>
        /// <para>At least one plugin in the group must be selected.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("At least one plugin in the group must be selected.")]
        SelectAtLeastOne,
        
        /// <summary>
        /// <para>At most one plugin in the group must be selected.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("At most one plugin in the group must be selected.")]
        SelectAtMostOne,
        
        /// <summary>
        /// <para>Exactly one plugin in the group must be selected.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Exactly one plugin in the group must be selected.")]
        SelectExactlyOne,
        
        /// <summary>
        /// <para>All plugins in the group must be selected.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("All plugins in the group must be selected.")]
        SelectAll,
        
        /// <summary>
        /// <para>Any number of plugins in the group may be selected.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Any number of plugins in the group may be selected.")]
        SelectAny,
    }
    
    /// <summary>
    /// <para>A list of plugin groups.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A list of plugin groups.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("groupList", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GroupList
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Group> _group;
        
        /// <summary>
        /// <para>A group of plugins for the mod.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A group of plugins for the mod.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("group", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<Group> Group
        {
            get
            {
                return _group;
            }
            private set
            {
                _group = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="GroupList" /> class.</para>
        /// </summary>
        public GroupList()
        {
            this._group = new System.Collections.ObjectModel.Collection<Group>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private OrderEnum _order = PrettyFOMOD.OrderEnum.Ascending;
        
        /// <summary>
        /// <para>The order by which to list the groups.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(PrettyFOMOD.OrderEnum.Ascending)]
        [System.ComponentModel.DescriptionAttribute("The order by which to list the groups.")]
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public OrderEnum Order
        {
            get
            {
                return _order;
            }
            set
            {
                _order = value;
            }
        }
    }
    
    /// <summary>
    /// <para>A list of install steps.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A list of install steps.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("stepList", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StepList
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<InstallStep> _installStep;
        
        /// <summary>
        /// <para>A list of install steps for the mod.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A list of install steps for the mod.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("installStep", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<InstallStep> InstallStep
        {
            get
            {
                return _installStep;
            }
            private set
            {
                _installStep = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="StepList" /> class.</para>
        /// </summary>
        public StepList()
        {
            this._installStep = new System.Collections.ObjectModel.Collection<InstallStep>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private OrderEnum _order = PrettyFOMOD.OrderEnum.Ascending;
        
        /// <summary>
        /// <para>The order by which to list the steps.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(PrettyFOMOD.OrderEnum.Ascending)]
        [System.ComponentModel.DescriptionAttribute("The order by which to list the steps.")]
        [System.Xml.Serialization.XmlAttributeAttribute("order")]
        public OrderEnum Order
        {
            get
            {
                return _order;
            }
            set
            {
                _order = value;
            }
        }
    }
    
    /// <summary>
    /// <para>A step in the install process containing groups of optional plugins.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A step in the install process containing groups of optional plugins.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("installStep", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstallStep
    {
        
        /// <summary>
        /// <para>The pattern against which to match the conditional flags and installed files. If the pattern is matched, then the install step will be visible.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The pattern against which to match the conditional flags and installed files. If " +
            "the pattern is matched, then the install step will be visible.")]
        [System.Xml.Serialization.XmlElementAttribute("visible", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CompositeDependency Visible { get; set; }
        
        /// <summary>
        /// <para>The list of optional files (or plugins) that may optionally be installed for this module.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The list of optional files (or plugins) that may optionally be installed for this" +
            " module.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("optionalFileGroups", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GroupList OptionalFileGroups { get; set; }
        
        /// <summary>
        /// <para>The name of the install step.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The name of the install step.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("name")]
        public string Name { get; set; }
    }
    
    /// <summary>
    /// <para>A pattern of mod files and conditional flags that determine whether to instal specific files.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A pattern of mod files and conditional flags that determine whether to instal spe" +
        "cific files.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("conditionalInstallPattern", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConditionalInstallPattern
    {
        
        /// <summary>
        /// <para>The list of mods and their states against which to match the user's installation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The list of mods and their states against which to match the user\'s installation." +
            "")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("dependencies", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CompositeDependency Dependencies { get; set; }
        
        /// <summary>
        /// <para>The files and filders to install if the pattern is matched.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The files and filders to install if the pattern is matched.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("files", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FileList Files { get; set; }
    }
    
    /// <summary>
    /// <para>A list of conditional install patterns.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A list of conditional install patterns.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("conditionalInstallPatternList", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConditionalInstallPatternList
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ConditionalInstallPattern> _pattern;
        
        /// <summary>
        /// <para>A specific pattern of mod files and condition flags against which to match the user's installation.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("A specific pattern of mod files and condition flags against which to match the us" +
            "er\'s installation.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("pattern", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<ConditionalInstallPattern> Pattern
        {
            get
            {
                return _pattern;
            }
            private set
            {
                _pattern = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ConditionalInstallPatternList" /> class.</para>
        /// </summary>
        public ConditionalInstallPatternList()
        {
            this._pattern = new System.Collections.ObjectModel.Collection<ConditionalInstallPattern>();
        }
    }
    
    /// <summary>
    /// <para>A list of optional files that may optionally be installed for this module, base on condition flags.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("A list of optional files that may optionally be installed for this module, base o" +
        "n condition flags.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("conditionalFileInstallList", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConditionalFileInstallList
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ConditionalInstallPattern> _patterns;
        
        /// <summary>
        /// <para>The list of patterns against which to match the conditional flags and installed files. All matching patterns will have their files installed.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The list of patterns against which to match the conditional flags and installed f" +
            "iles. All matching patterns will have their files installed.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlArrayAttribute("patterns", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("pattern", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.ObjectModel.Collection<ConditionalInstallPattern> Patterns
        {
            get
            {
                return _patterns;
            }
            private set
            {
                _patterns = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ConditionalFileInstallList" /> class.</para>
        /// </summary>
        public ConditionalFileInstallList()
        {
            this._patterns = new System.Collections.ObjectModel.Collection<ConditionalInstallPattern>();
        }
    }
    
    /// <summary>
    /// <para>Describes the display properties of the module title.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Describes the display properties of the module title.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("moduleTitle", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModuleTitle
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private ModuleTitlePosition _position = PrettyFOMOD.ModuleTitlePosition.Left;
        
        /// <summary>
        /// <para>The identifying name of the condition flag.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute(PrettyFOMOD.ModuleTitlePosition.Left)]
        [System.ComponentModel.DescriptionAttribute("The identifying name of the condition flag.")]
        [System.Xml.Serialization.XmlAttributeAttribute("position")]
        public ModuleTitlePosition Position
        {
            get
            {
                return _position;
            }
            set
            {
                _position = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private byte[] _colour = ((byte[])(new byte[] {
                0,
                0,
                0}));
        
        /// <summary>
        /// <para>The colour to use for the title.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The colour to use for the title.")]
        [System.Xml.Serialization.XmlAttributeAttribute("colour", DataType="hexBinary")]
        public byte[] Colour
        {
            get
            {
                return _colour;
            }
            set
            {
                _colour = value;
            }
        }
    }
    
    /// <summary>
    /// <para>The possible title positions.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("The possible title positions.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("ModuleTitlePosition", Namespace="", AnonymousType=true)]
    public enum ModuleTitlePosition
    {
        
        /// <summary>
        /// <para>Positions the title on the left side of the form header.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Positions the title on the left side of the form header.")]
        Left,
        
        /// <summary>
        /// <para>Positions the title on the right side of the form header.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Positions the title on the right side of the form header.")]
        Right,
        
        /// <summary>
        /// <para>Positions the title on the right side of the image in the form header.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Positions the title on the right side of the image in the form header.")]
        RightOfImage,
    }
    
    /// <summary>
    /// <para>Describes the configuration of a module.</para>
    /// <para>The main element containing the module configuration info.</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Describes the configuration of a module. The main element containing the module c" +
        "onfiguration info.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1107.0")]
    [Serializable()]
    [System.Xml.Serialization.XmlTypeAttribute("moduleConfiguration", Namespace="")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("config", Namespace="")]
    public partial class ModuleConfiguration
    {
        
        /// <summary>
        /// <para>The name of the module.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The name of the module.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("moduleName", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ModuleTitle ModuleName { get; set; }
        
        /// <summary>
        /// <para>The module logo.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The module logo.")]
        [System.Xml.Serialization.XmlElementAttribute("moduleImage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public HeaderImage ModuleImage { get; set; }
        
        /// <summary>
        /// <para>Items upon which the module depends.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Items upon which the module depends.")]
        [System.Xml.Serialization.XmlElementAttribute("moduleDependencies", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CompositeDependency ModuleDependencies { get; set; }
        
        /// <summary>
        /// <para>The list of files and folders that must be installed for this module.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The list of files and folders that must be installed for this module.")]
        [System.Xml.Serialization.XmlElementAttribute("requiredInstallFiles", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FileList RequiredInstallFiles { get; set; }
        
        /// <summary>
        /// <para>The list of install steps that determine which files (or plugins) that may optionally be installed for this module.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The list of install steps that determine which files (or plugins) that may option" +
            "ally be installed for this module.")]
        [System.Xml.Serialization.XmlElementAttribute("installSteps", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StepList InstallSteps { get; set; }
        
        /// <summary>
        /// <para>The list of optional files that may optionally be installed for this module, base on condition flags.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("The list of optional files that may optionally be installed for this module, base" +
            " on condition flags.")]
        [System.Xml.Serialization.XmlElementAttribute("conditionalFileInstalls", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ConditionalFileInstallList ConditionalFileInstalls { get; set; }
    }
}
